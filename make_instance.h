#ifndef STINGRAY_TOOLKIT_MAKE_INSTANCE_H
#define STINGRAY_TOOLKIT_MAKE_INSTANCE_H


#include <stingray/toolkit/Macro.h>


namespace stingray
{


#define DETAIL_MAKE_INSTANCE_TYPENAMES(Index_, UserArg_) TOOLKIT_COMMA_IF(Index_) typename TOOLKIT_CAT(Param, Index_)
#define DETAIL_MAKE_INSTANCE_PARAMDECLS(Index_, UserArg_) TOOLKIT_COMMA_IF(Index_) const TOOLKIT_CAT(Param, Index_)& TOOLKIT_CAT(p, Index_)
#define DETAIL_MAKE_INSTANCE_PARAMS(Index_, UserArg_) TOOLKIT_COMMA_IF(Index_) TOOLKIT_CAT(p, Index_)
#define DETAIL_DECL_MAKE_INSTANCE(N_, UserArg_) \
	template< typename T TOOLKIT_COMMA_IF(N_) TOOLKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_TYPENAMES, TOOLKIT_EMPTY()) > \
	T make_instance(TOOLKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMDECLS, TOOLKIT_EMPTY())) \
	{ return T(TOOLKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMS, TOOLKIT_EMPTY())); } \
	template< typename T TOOLKIT_COMMA_IF(N_) TOOLKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_TYPENAMES, TOOLKIT_EMPTY()) > \
	T make_instance_##N_(TOOLKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMDECLS, TOOLKIT_EMPTY())) \
	{ return T(TOOLKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMS, TOOLKIT_EMPTY())); }

	TOOLKIT_REPEAT_NESTING_2(10, DETAIL_DECL_MAKE_INSTANCE, TOOLKIT_EMPTY())


#undef DETAIL_MAKE_INSTANCE_PARAMDECLS
#undef DETAIL_MAKE_INSTANCE_TYPENAMES
#undef DETAIL_DECL_MAKE_INSTANCE

}

#endif

#ifndef STINGRAYKIT_MAKE_INSTANCE_H
#define STINGRAYKIT_MAKE_INSTANCE_H


#include <stingraykit/Macro.h>


namespace stingray
{


#define DETAIL_MAKE_INSTANCE_TYPENAMES(Index_, UserArg_) STINGRAYKIT_COMMA_IF(Index_) typename STINGRAYKIT_CAT(Param, Index_)
#define DETAIL_MAKE_INSTANCE_PARAMDECLS(Index_, UserArg_) STINGRAYKIT_COMMA_IF(Index_) const STINGRAYKIT_CAT(Param, Index_)& STINGRAYKIT_CAT(p, Index_)
#define DETAIL_MAKE_INSTANCE_PARAMS(Index_, UserArg_) STINGRAYKIT_COMMA_IF(Index_) STINGRAYKIT_CAT(p, Index_)
#define DETAIL_DECL_MAKE_INSTANCE(N_, UserArg_) \
	template< typename T STINGRAYKIT_COMMA_IF(N_) STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_TYPENAMES, STINGRAYKIT_EMPTY()) > \
	T make_instance(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMDECLS, STINGRAYKIT_EMPTY())) \
	{ return T(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMS, STINGRAYKIT_EMPTY())); } \
	template< typename T STINGRAYKIT_COMMA_IF(N_) STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_TYPENAMES, STINGRAYKIT_EMPTY()) > \
	T make_instance_##N_(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMDECLS, STINGRAYKIT_EMPTY())) \
	{ return T(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMS, STINGRAYKIT_EMPTY())); }

	STINGRAYKIT_REPEAT_NESTING_2(10, DETAIL_DECL_MAKE_INSTANCE, STINGRAYKIT_EMPTY())


#undef DETAIL_MAKE_INSTANCE_PARAMDECLS
#undef DETAIL_MAKE_INSTANCE_TYPENAMES
#undef DETAIL_DECL_MAKE_INSTANCE

}

#endif

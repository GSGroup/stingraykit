#ifndef STINGRAYKIT_MAKE_INSTANCE_H
#define STINGRAYKIT_MAKE_INSTANCE_H

// Copyright (c) 2011 - 2019, GS Group, https://github.com/GSGroup
// Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
// provided that the above copyright notice and this permission notice appear in all copies.
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
// WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#include <stingraykit/function/functional.h>

namespace stingray
{


#define DETAIL_MAKE_INSTANCE_TYPENAMES(Index_, UserArg_) STINGRAYKIT_COMMA_IF(Index_) typename STINGRAYKIT_CAT(Param, Index_)
#define DETAIL_MAKE_INSTANCE_PARAMDECLS(Index_, UserArg_) STINGRAYKIT_COMMA_IF(Index_) const STINGRAYKIT_CAT(Param, Index_)& STINGRAYKIT_CAT(p, Index_)
#define DETAIL_MAKE_INSTANCE_PARAMS(Index_, UserArg_) STINGRAYKIT_COMMA_IF(Index_) STINGRAYKIT_CAT(p, Index_)
#define DETAIL_DECL_MAKE_INSTANCE(N_, UserArg_) \
	template< typename T STINGRAYKIT_COMMA_IF(N_) STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_TYPENAMES, STINGRAYKIT_EMPTY()) > \
	T make_instance(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMDECLS, STINGRAYKIT_EMPTY())) \
	{ return T(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMS, STINGRAYKIT_EMPTY())); } \
	template< typename T STINGRAYKIT_COMMA_IF(N_) STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_TYPENAMES, STINGRAYKIT_EMPTY()) > \
	T make_instance_##N_(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMDECLS, STINGRAYKIT_EMPTY())) \
	{ return T(STINGRAYKIT_REPEAT(N_, DETAIL_MAKE_INSTANCE_PARAMS, STINGRAYKIT_EMPTY())); }

	STINGRAYKIT_REPEAT_NESTING_2(10, DETAIL_DECL_MAKE_INSTANCE, STINGRAYKIT_EMPTY())


#undef DETAIL_MAKE_INSTANCE_PARAMDECLS
#undef DETAIL_MAKE_INSTANCE_TYPENAMES
#undef DETAIL_DECL_MAKE_INSTANCE


#define DETAIL_STINGRAY_MAKE_INSTANCE(N_, UserArg_) \
	STINGRAYKIT_INSERT_IF(N_, template<STINGRAYKIT_REPEAT(N_, STINGRAYKIT_TEMPLATE_PARAM_DECL, T)>) \
	Result_ operator()(STINGRAYKIT_REPEAT(N_, STINGRAYKIT_FUNCTION_PARAM_DECL, T)) const \
	{ return Result_(STINGRAYKIT_REPEAT(N_, STINGRAYKIT_FUNCTION_PARAM_USAGE, ~)); }

	template < typename Result_ >
	struct MakeInstance : public function_info<Result_, UnspecifiedParamTypes>
	{
		STINGRAYKIT_REPEAT_NESTING_2(10, DETAIL_STINGRAY_MAKE_INSTANCE, ~)
	};

#undef DETAIL_STINGRAY_MAKE_INSTANCE

}

#endif

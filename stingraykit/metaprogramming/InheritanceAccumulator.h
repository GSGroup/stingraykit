#ifndef STINGRAYKIT_METAPROGRAMMING_INHERITANCEACCUMULATOR_H
#define STINGRAYKIT_METAPROGRAMMING_INHERITANCEACCUMULATOR_H

// Copyright (c) 2011 - 2019, GS Group, https://github.com/GSGroup
// Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted,
// provided that the above copyright notice and this permission notice appear in all copies.
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
// WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

#include <stingraykit/metaprogramming/TypeList.h>

namespace stingray
{

	namespace Detail_InheritanceAccumulator
	{

		template < typename TypeList >
		struct Impl;

#define DETAIL_STINGRAYKIT_IA_TYPELISTNODE_BEGIN(Index_, Type_) STINGRAYKIT_COMMA_IF(Index_) TypeListNode< STINGRAYKIT_CAT(Type_, Index_)
#define DETAIL_STINGRAYKIT_IA_TYPELISTNODE_END(Index_, UserArg_) >

#define DETAIL_STINGRAYKIT_IA_INHERIT(Index_, Type_) STINGRAYKIT_COMMA_IF(Index_) public STINGRAYKIT_CAT(Type_, Index_)

#define DETAIL_STINGRAYKIT_IA_CONSTRUCT_BASE(Index_, Args_) STINGRAYKIT_COMMA_IF(Index_) STINGRAYKIT_CAT(B_, Index_)(STINGRAYKIT_REPEAT(Args_, STINGRAYKIT_FUNCTION_PARAM_USAGE, T))

#define DETAIL_STINGRAYKIT_IA_CTORS(N_, Bases_) \
		STINGRAYKIT_INSERT_IF(N_, template <) STINGRAYKIT_REPEAT_NESTING_2(N_, STINGRAYKIT_TEMPLATE_PARAM_DECL, T) STINGRAYKIT_INSERT_IF(N_, >) \
		Impl(STINGRAYKIT_REPEAT_NESTING_2(N_, STINGRAYKIT_FUNCTION_PARAM_DECL, T)) STINGRAYKIT_INSERT_IF(Bases_, : STINGRAYKIT_REPEAT_NESTING_2(Bases_, DETAIL_STINGRAYKIT_IA_CONSTRUCT_BASE, N_)) { } \
		STINGRAYKIT_INSERT_IF(N_, template < STINGRAYKIT_REPEAT_NESTING_2(N_, STINGRAYKIT_TEMPLATE_PARAM_DECL, T) > \
		Impl(STINGRAYKIT_REPEAT_NESTING_2(N_, STINGRAYKIT_FUNCTION_PARAM_DECL_BYREF, T)) STINGRAYKIT_INSERT_IF(Bases_, :) STINGRAYKIT_REPEAT_NESTING_2(Bases_, DETAIL_STINGRAYKIT_IA_CONSTRUCT_BASE, N_) { })

#define DETAIL_STINGRAYKIT_IA_IMPL(N_, UserArg_) \
		template < STINGRAYKIT_REPEAT_NESTING_3(N_, STINGRAYKIT_TEMPLATE_PARAM_DECL, B_) > \
		struct Impl<STINGRAYKIT_REPEAT_NESTING_3(N_, DETAIL_STINGRAYKIT_IA_TYPELISTNODE_BEGIN, B_) STINGRAYKIT_COMMA_IF(N_) TypeListEndNode> STINGRAYKIT_REPEAT_NESTING_3(N_, DETAIL_STINGRAYKIT_IA_TYPELISTNODE_END, B_) \
			STINGRAYKIT_INSERT_IF(N_, : STINGRAYKIT_REPEAT_NESTING_3(N_, DETAIL_STINGRAYKIT_IA_INHERIT, B_)) \
		{ \
			STINGRAYKIT_REPEAT_NESTING_3(3, DETAIL_STINGRAYKIT_IA_CTORS, N_) \
		};

		STINGRAYKIT_REPEAT_NESTING_4(MAX_TYPELIST_LEN, DETAIL_STINGRAYKIT_IA_IMPL, ~)

#undef DETAIL_STINGRAYKIT_IA_IMPL
#undef DETAIL_STINGRAYKIT_IA_CTORS
#undef DETAIL_STINGRAYKIT_IA_CONSTRUCT_BASE
#undef DETAIL_STINGRAYKIT_IA_INHERIT
#undef DETAIL_STINGRAYKIT_IA_TYPELISTNODE_END
#undef DETAIL_STINGRAYKIT_IA_TYPELISTNODE_BEGIN

	}


	template < typename TypeList >
	struct InheritanceAccumulator
	{
		typedef Detail_InheritanceAccumulator::Impl<TypeList> ValueT;
	};

#define DETAIL_STINGRAYKIT_INHERITANCE_ACCUMULATOR(N_, UserArg_) \
	template < STINGRAYKIT_REPEAT(N_, STINGRAYKIT_TEMPLATE_PARAM_DECL, B_) > \
	struct InheritanceAccumulator<TypeList<STINGRAYKIT_REPEAT(N_, STINGRAYKIT_TEMPLATE_PARAM_USAGE, B_)> > \
	{ \
		typedef Detail_InheritanceAccumulator::Impl<typename TypeList<STINGRAYKIT_REPEAT(N_, STINGRAYKIT_TEMPLATE_PARAM_USAGE, B_)>::type> ValueT; \
	};

	STINGRAYKIT_REPEAT_NESTING_2(MAX_TYPELIST_LEN, DETAIL_STINGRAYKIT_INHERITANCE_ACCUMULATOR, ~)

#undef DETAIL_STINGRAYKIT_INHERITANCE_ACCUMULATOR

}

#endif
